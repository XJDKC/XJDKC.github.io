<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橡胶大口吃のBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xjdkc.github.io/"/>
  <updated>2018-03-27T10:15:06.727Z</updated>
  <id>https://xjdkc.github.io/</id>
  
  <author>
    <name>XJDKC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nodepad++结合DOSBox配置一键编译运行</title>
    <link href="https://xjdkc.github.io/Nodepad++%E7%BB%93%E5%90%88DOSBox%E9%85%8D%E7%BD%AE%E4%B8%80%E9%94%AE%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C.html"/>
    <id>https://xjdkc.github.io/Nodepad++结合DOSBox配置一键编译运行.html</id>
    <published>2018-03-26T16:56:40.263Z</published>
    <updated>2018-03-27T10:15:06.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　最近在学习汇编语言程序设计，在最开始肯定是要配置环境啦，但是我们学的还只是8086系列的处理器的汇编，而现在的CPU是酷睿系列了，根本不支持，所以就需要用到DOSBox来模拟环境，然而这就遇到一个问题了：DOSBox编译链接运行程序十分麻烦，而且每次重新打开都需要输入一大堆东西，很是浪费时间，那么如何简单快捷的实现像写C,C++时那样一个快捷键源代码就自动编译运行了呢？于是就有了这篇博文。</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>　　首先介绍一下实现环境：<br>　　　　<em> DOSBox 0.74 模拟DOS系统　　　　</em> Notepad++ v7.5.6 (64 bit) 用于编辑汇编源程序<br>　　　　<em> MASM 5.0 汇编程序编译器　　　　</em> LINK 连接程序<br>　　　　* TD Turbor Debugger 调试器<br>　　这些软件需要自己下好并安装在对应位置，其中MASM LINK TD需要英文路径。</p><a id="more"></a><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>　　实现的大致思路就是通过Notepad++运用批处理指令打开DOSBox 并在其中输入相关指令使源代码编译链接运行，实现编译运行调试的快捷指令需要三步</p><h3 id="修改DOSBox配置文件"><a href="#修改DOSBox配置文件" class="headerlink" title="修改DOSBox配置文件"></a>修改DOSBox配置文件</h3><p>首先打开以下路径：</p><blockquote><p>C:\Users\Mr. Xing\AppData\Local\DOSBox</p></blockquote><p>然后就会在其中看到DOSBox的配置文件 dosbox-0.74.conf 用记事本打开在最下方的autoexec下输入MASM,LINK,TD的存放目录即</p><blockquote><p>mount c d:\program\asm<br>c:</p></blockquote><p>然后在保存关闭,这样在运行DOSBox的时候就会首先执行这两行而不用重新输入。两行指令意思是  </p><ul><li>将d:\program\asm挂载为DOSBox下的c盘</li><li>进入c盘</li></ul><h3 id="配置编译运行"><a href="#配置编译运行" class="headerlink" title="配置编译运行"></a>配置编译运行</h3><p>修改完DOSBox的配置文件，接下来就需要配置编译运行快捷键了。<br>首先打开Notepad++ 输入一段测试汇编源程序，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">;----------------------------</span><br><span class="line">STACK   SEGMENT STACK use16</span><br><span class="line">    DB  200 DUP(0)</span><br><span class="line">STACK   ENDS</span><br><span class="line">;----------------------------</span><br><span class="line">DATA    SEGMENT use16</span><br><span class="line">MSG DB  &apos;How are you! $&apos;</span><br><span class="line">DATA    ENDS</span><br><span class="line">;------------------------------</span><br><span class="line">CODE SEGMENT use16</span><br><span class="line">        ASSUME CS:CODE,DS:DATA,SS:STACK</span><br><span class="line">BEGIN:  MOV  AX, DATA</span><br><span class="line">        MOV  DS, AX</span><br><span class="line">        MOV  DX, OFFSET MSG</span><br><span class="line">        MOV  AH, 9</span><br><span class="line">        INT  21H</span><br><span class="line">        MOV  AH,4CH   ;exit</span><br><span class="line">        INT  21H</span><br><span class="line">;-----------------------------</span><br><span class="line">CODE    ENDS</span><br><span class="line">    END BEGIN</span><br></pre></td></tr></table></figure></p><p>然后点击菜单项的运行，如下图: 　<br><img src="./photo/notepad_run.jpg" width="50%" height="50%"><br>然后输入以下命令</p><blockquote><p><code>D:\软件\DOSBox\DOSBox-0.74\DOSBOX.exe -c &quot;@echo off&quot; -c &quot;mount d $(CURRENT_DIRECTORY)&quot; -c &quot;MASM d:\$(NAME_PART).asm;&quot; -c &quot;LINK $(NAME_PART).obj;&quot; -c &quot;COPY $(NAME_PART).exe d:\$(NAME_PART).exe&quot; -c cls -c &quot;d:\$(NAME_PART).exe&quot; -c echo. -c pause -c exit</code></p></blockquote><p>这段指令的意思如下:  </p><ul><li><code>D:\软件\DOSBox\DOSBox-0.74\DOSBOX.exe DOSBox</code>  软件运行程序文件地址</li><li><code>-c DOSBox command</code>   命令 后跟一条指令且每条指令之前都要加-c</li><li><code>@echo off</code>   批处理指令 意思是关闭回显(这样在输入每条指令的时候就不会有c:\之类的)</li><li><code>mount d $(CURRENT_DIRECTORY)</code>    将当前汇编源程序挂在到DOSBox的d盘</li><li><code>MASM d:\$(NAME_PART).asm;</code>   编译asm源程序生成二进制目标文件</li><li><code>LINK $(NAME_PART).obj;</code>  链接二进制目标文件生成EXE文件</li><li><code>COPY $(NAME_PART).exe d:\$(NAME_PART).exe</code>   将生成的EXE文件复制到源代码目录下</li><li><code>cls</code>                     清屏</li><li><code>d:\$(NAME_PART).exe</code>     运行生成程序</li><li><code>echo.</code>                   换行</li><li><code>pause</code>                   暂停</li><li><code>exit</code>                    退出DOSBox</li><li><code>$(FULL_CURRENT_PATH)</code>    当前文件绝对路径 如d:\program\asm\demo.asm</li><li><code>$(CURRENT_DIRECTORY)</code>    当前目录 如d:\program\asm</li><li><code>$(NAME_PART)</code>            当前文件文件名 如demo</li><li><code>$(FILE_NAME)</code>            当前文件全名 如demo.asm</li><li><code>$(EXT_PART)</code>             当前文件扩展名如 asm</li></ul><p><strong>特别注意:如果你的源代码在E盘,那么请在输入指令的时候将源代码挂载到E盘</strong><br><strong>这段程序只适合于保存到D:盘任何地方的asm文件</strong></p><p>然后保存设置响应的名称和快捷键就OK了(我设置的是CTRL+ALT+B)，具体运行效果如下:<br><img src="./photo/notepad_exe.jpg" width="50%" height="50%">  </p><h3 id="配置调试"><a href="#配置调试" class="headerlink" title="配置调试"></a>配置调试</h3><p>同理只需要在运行框中输入以下批处理指令即可</p><blockquote><p><code>D:\软件\DOSBox\DOSBox-0.74\DOSBOX.exe -c &quot;mount d $(CURRENT_DIRECTORY)&quot; -c &quot;TD d:\$(NAME_PART).exe&quot;</code></p></blockquote><p>运行结果如下:<br><img src="./photo/td_demo_exe.jpg" width="50%" height="50%">  </p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这次实现一键编译翻了许多文档，发现最全的还是官方文档，学习到了许多关于批处理的知识，收获还是蛮多的。<br>还有就是由于指令长度的限制 在一键编译的时候并没有删除编译得到的obj和exe文件需要清理，有需要的小伙伴可以怎加一条指令del专门清理.obj 和 .exe<br>如果有什么疑惑或者见解欢迎留言。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近在学习汇编语言程序设计，在最开始肯定是要配置环境啦，但是我们学的还只是8086系列的处理器的汇编，而现在的CPU是酷睿系列了，根本不支持，所以就需要用到DOSBox来模拟环境，然而这就遇到一个问题了：DOSBox编译链接运行程序十分麻烦，而且每次重新打开都需要输入一大堆东西，很是浪费时间，那么如何简单快捷的实现像写C,C++时那样一个快捷键源代码就自动编译运行了呢？于是就有了这篇博文。&lt;/p&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;p&gt;　　首先介绍一下实现环境：&lt;br&gt;　　　　&lt;em&gt; DOSBox 0.74 模拟DOS系统
　　　　&lt;/em&gt; Notepad++ v7.5.6 (64 bit) 用于编辑汇编源程序&lt;br&gt;　　　　&lt;em&gt; MASM 5.0 汇编程序编译器
　　　　&lt;/em&gt; LINK 连接程序&lt;br&gt;　　　　* TD Turbor Debugger 调试器&lt;br&gt;　　这些软件需要自己下好并安装在对应位置，其中MASM LINK TD需要英文路径。&lt;/p&gt;
    
    </summary>
    
      <category term="Assembly" scheme="https://xjdkc.github.io/categories/Assembly/"/>
    
    
      <category term="汇编assembly" scheme="https://xjdkc.github.io/tags/%E6%B1%87%E7%BC%96assembly/"/>
    
      <category term="DOSBox" scheme="https://xjdkc.github.io/tags/DOSBox/"/>
    
      <category term="Notepad++" scheme="https://xjdkc.github.io/tags/Notepad/"/>
    
      <category term="批处理" scheme="https://xjdkc.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>盒子与小球</title>
    <link href="https://xjdkc.github.io/%E5%B0%8F%E7%90%83%E4%B8%8E%E7%9B%92%E5%AD%90.html"/>
    <id>https://xjdkc.github.io/小球与盒子.html</id>
    <published>2017-12-13T04:02:00.000Z</published>
    <updated>2017-12-30T08:26:21.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description-of-the-Problem"><a href="#Description-of-the-Problem" class="headerlink" title="Description of the Problem:"></a>Description of the Problem:</h3><blockquote><p>你有K个相同的盒子，N个互不相同的物品。你准备把这N个物品装入K个盒子，每个盒子最少要放入一个物品。问一共会有多少种分配方法。由于方案数很大，只需要输出方案总数除以10000的余数。</p></blockquote><h4 id="INPUT："><a href="#INPUT：" class="headerlink" title="INPUT："></a>INPUT：</h4><blockquote><p>第一行有一个正整数 t ，表示数据组数(不多于50)。每组数据仅一行，两个整数， N 和K，其中1≤N ≤ 10^9，K≤min(50,N)。</p></blockquote><h4 id="OUTPUT："><a href="#OUTPUT：" class="headerlink" title="OUTPUT："></a>OUTPUT：</h4><blockquote><p>每行输出一个整数，为方案总数除以10000的余数。</p></blockquote><a id="more"></a><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h3><p>　　这是一个来自于同为HUSTer的高中童鞋的问题,从这个问题描述中,我们可以知道把N个物品放入K个相同的盒子的方法数就是  把N-1个物品放入K-1个盒子的方法数  加上  把N-1个物品放入K个盒子的方法数*K,为什么?我们只要考虑最后一个盒子和最后一个球即可,由于盒子是相同的,那么有两种情况<br>　　1.最后一个盒子只有一个球且为第N个球，即前面N-1个球没有填满K个盒子，最后一个球只能放在空盒子里。这种情况方法数就等于把N-1个物品放入K-1个盒子的方法数。<br>　　2.前面N-1个球填满的K个盒子，那么最后一个球可以任意放。这种情况方法数就等于  把N-1个物品放入K个盒子的方法数*K。</p><p>　　所以如果用f(N,K)来表示 N个物品K个盒子的方法数，可以得到以下递推式</p><p>　　<strong>f(N,K)=f(N-1,K-1)+f(N-1,K)*K;(即第二类斯特林数)</strong></p><p>　　所以现在已经可以用程序通过递推算出结果（递归也可以但要慢一些，即使是记忆化递归）。但问题解决了吗？</p><p>　　答案是：<strong>NO</strong>。由于N很大所以要一项一项递推计算f(N,K)肯定会超时应为至少要算N*K次，所以显然要找更快速的算法让时间复杂度降低O(logn*K)。我们这时可以运用矩阵+快速幂的形式来解决这个问题。</p><p>　　首先来解释一下什么是快速幂：举个例子，对于计算q^k，我们其实可以将之看成<strong>q^[a(n)*2^n+a(n-1)*2^(n-1)+……a(1)*2^1+a(0)*2^0]</strong>,其中a(n)=0或1。即把k看成许多{2^m}中某n+1项之和，那么怎么快速计算q^k呢？我们先把q^k看成n+1项之积，然后我们可以对k不断除2取余，如果第i次除2后余数为1，那么表示a(i-1)=1，即有n+1项乘积中有q^(i-1)这一项，具体描述步骤如下</p><p>　　首先我们用让一个数ans=1，用来存答案，用一个数x来存q^(i-1)，x开始为1，然后先对k进行第一次除以2，如果余数为1，证明a(0)=1，有q^0这一项，于是让ans*=x,如果不为1，证明不存在这一项(或者说着这一项为1)，就不用乘，然后进行完上述操作，x*=q;<br>　　然后我们对k进行第二次除以2，此时x=q^1，如果余数为1，证明a(1)=1，有q^1这一项，于是让ans*=x,如果不为1，证明不存在这一项(或者说着这一项为1)，就不用乘，然后进行完上述操作，x*=q;所以在对k进行第i次除以2操作时，x=q^(i-1)， 如果余数为1，证明a(i-1)=1，有q^(i-1)这一项，于是让ans*=x,如果不为1，证明不存在这一项(或者说着这一项为1)，就不用乘，然后进行完上述操作，x*=q;最后如果k=0证明已经除完了，ans已经算完那么就得到了结果，结束运算。<br>　　现在来分析一下算法效率，若按照原算法计算q^k要乘k次也就是计算k次，用现在的快速幂算法，则要除以[log2(k)]+1次，也就是x要乘[log2(k)]+1次，而如果a(n)均为1，那么要ans也要乘 [log2(k)]+1，所以最多算2{[log2(k)]+1}次算法效率为O(logk)。<br>        现在来讲一讲矩阵乘法：<br>　　定义：设A为m×p的矩阵，B为p×n的矩阵，那么称m×n的矩阵C为矩阵A与B的乘积，记作C=A×B<br>　　计算方法：乘积C的第m行第n列的元素等于矩阵A的第m行的元素与矩阵B的第n列对应元素乘积之和。<br>        性质：乘法结合律：(AB)C=A(BC)</p><p>　　所以我们可以把原问题的递推式子变成一个矩阵递推式<br>$$\begin{equation}<br>\begin{pmatrix}<br>f(n,k)\\<br>f(n,k-1)\\<br>\vdots\\<br>f(n,2)\\<br>f(n,1)\\<br>\end{pmatrix}={<br>\begin{pmatrix}<br>k&amp;1&amp;0&amp;\cdots&amp;0&amp;0\\<br>0&amp;k-1&amp;1&amp;\cdots&amp;0&amp;0\\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\\<br>0&amp;0&amp;0&amp;\cdots&amp;2&amp;1\\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;1\\<br>\end{pmatrix}}<br>{\begin{pmatrix}<br>f(n-1,k)\\<br>f(n-1,k-1)\\<br>\vdots\\<br>f(n-1,2)\\<br>f(n-1,1)\\<br>\end{pmatrix}}<br>\end{equation}$$</p><p>　　所以可以用矩阵递推式把原递推式变成等比数列形式那么可以得到以下式子<br>$$\begin{equation}<br>\begin{pmatrix}<br>f(n,k)\\<br>f(n,k-1)\\<br>\vdots\\<br>f(n,2)\\<br>f(n,1)\\<br>\end{pmatrix}={<br>\begin{pmatrix}<br>k&amp;1&amp;0&amp;\cdots&amp;0&amp;0\\<br>0&amp;k-1&amp;1&amp;\cdots&amp;0&amp;0\\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\\<br>0&amp;0&amp;0&amp;\cdots&amp;2&amp;1\\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;1\\<br>\end{pmatrix}}^{(n-k)}<br>{\begin{pmatrix}<br>f(k,k)\\<br>f(k,k-1)\\<br>\vdots\\<br>f(k,2)\\<br>f(k,1)\\<br>\end{pmatrix}}<br>\end{equation}$$    </p><p>　　然后我们将快速幂与矩阵乘法递推式结合起来，我们只需要先用递推计算出base矩阵，然后用快速幂算出per矩阵的(n-k)次方两者相乘得到ans 其中我们将ans矩阵不再初始化为1，而是初始化为矩阵中的“1”(其他矩阵相乘等于其他)。<br>$$<br>{<br>\begin{pmatrix}<br>1&amp;0&amp;0&amp;\cdots&amp;0&amp;0\\<br>0&amp;1&amp;0&amp;\cdots&amp;0&amp;0\\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\\<br>0&amp;0&amp;0&amp;\cdots&amp;1&amp;0\\<br>0&amp;0&amp;0&amp;\cdots&amp;0&amp;1\\<br>\end{pmatrix}}<br>$$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">10000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> m[<span class="number">66</span>][<span class="number">66</span>];</span><br><span class="line">&#125;;</span><br><span class="line">matrix per,ans,base,cal,unit; </span><br><span class="line"><span class="function">matrix <span class="title">mul</span><span class="params">(matrix a,matrix b,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">matrix c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;z;j++)</span><br><span class="line">&#123;</span><br><span class="line">c.m[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;y;k++)</span><br><span class="line">c.m[i][j]=(c.m[i][j]+a.m[i][k]*b.m[k][j])%mod;</span><br><span class="line">c.m[i][j]=c.m[i][j]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">matrix p=per;</span><br><span class="line"><span class="keyword">int</span> ci=n-k;</span><br><span class="line"><span class="keyword">while</span> (ci)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ci&amp;<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">   unit=mul(unit,p,k,k,k);</span><br><span class="line">   ci--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">p=mul(p,p,k,k,k);</span><br><span class="line">ci&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> unit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++) </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">50</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i==j&amp;&amp;i&lt;k) per.m[i][j]=k-i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j<span class="number">-1</span>==i&amp;&amp;j&lt;k) per.m[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> per.m[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i==j) unit.m[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> unit.m[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">base.m[i][<span class="number">0</span>]=cal.m[k<span class="number">-1</span>][k<span class="number">-1</span>-i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++) cal.m[i][i]=cal.m[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">cal.m[i][j]=(cal.m[i<span class="number">-1</span>][j]*(j+<span class="number">1</span>)+cal.m[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">calculation();</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">init(k);</span><br><span class="line">matrix xi=qpow(n,k);</span><br><span class="line">ans=mul(xi,base,k,k,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans.m[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Addition："><a href="#Addition：" class="headerlink" title="Addition："></a>Addition：</h3><p>下面给出一部分结果</p><table><thead><tr><th style="text-align:center">n k</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">7</td><td style="text-align:center">6</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">15</td><td style="text-align:center">25</td><td style="text-align:center">10</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">1</td><td style="text-align:center">31</td><td style="text-align:center">90</td><td style="text-align:center">65</td><td style="text-align:center">15</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">1</td><td style="text-align:center">63</td><td style="text-align:center">301</td><td style="text-align:center">350</td><td style="text-align:center">140</td><td style="text-align:center">21</td><td style="text-align:center">1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">127</td><td style="text-align:center">966</td><td style="text-align:center">1701</td><td style="text-align:center">1050</td><td style="text-align:center">266</td><td style="text-align:center">28</td><td style="text-align:center">1</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description-of-the-Problem&quot;&gt;&lt;a href=&quot;#Description-of-the-Problem&quot; class=&quot;headerlink&quot; title=&quot;Description of the Problem:&quot;&gt;&lt;/a&gt;Description of the Problem:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;你有K个相同的盒子，N个互不相同的物品。你准备把这N个物品装入K个盒子，每个盒子最少要放入一个物品。问一共会有多少种分配方法。由于方案数很大，只需要输出方案总数除以10000的余数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;INPUT：&quot;&gt;&lt;a href=&quot;#INPUT：&quot; class=&quot;headerlink&quot; title=&quot;INPUT：&quot;&gt;&lt;/a&gt;INPUT：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;第一行有一个正整数 t ，表示数据组数(不多于50)。每组数据仅一行，两个整数， N 和K，其中1≤N ≤ 10^9，K≤min(50,N)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;OUTPUT：&quot;&gt;&lt;a href=&quot;#OUTPUT：&quot; class=&quot;headerlink&quot; title=&quot;OUTPUT：&quot;&gt;&lt;/a&gt;OUTPUT：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;每行输出一个整数，为方案总数除以10000的余数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tech" scheme="https://xjdkc.github.io/categories/Tech/"/>
    
    
      <category term="算法" scheme="https://xjdkc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="矩阵" scheme="https://xjdkc.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="快速幂" scheme="https://xjdkc.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xjdkc.github.io/hello-world.html"/>
    <id>https://xjdkc.github.io/hello-world.html</id>
    <published>2017-12-08T13:37:43.348Z</published>
    <updated>2017-12-11T12:04:42.432Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
